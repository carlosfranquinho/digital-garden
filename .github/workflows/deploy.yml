name: Process and Deploy Digital Garden

on:
  repository_dispatch:
    types: [deploy-garden]

jobs:
  process-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Cancelar execu√ß√µes anteriores
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      # Passo 2: Fazer checkout do reposit√≥rio digital-garden
      - name: üöÄ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Passo 3: Processar o payload recebido
      - name: üì• Process payload data
        id: payload
        run: |
          # Converter o payload para formato JSON
          PAYLOAD='${{ toJSON(github.event.client_payload) }}'
          
          # Extrair a lista de ficheiros
          FILES=$(echo "$PAYLOAD" | jq -r '.payload[]')
          
          # Salvar para uso nos pr√≥ximos passos
          echo "files=${FILES}" >> $GITHUB_OUTPUT
          echo "$FILES" > filelist.txt

      # Passo 4: Limpar diret√≥rios antigos
      - name: üßπ Clean up directories
        run: |
          rm -rf content/posts/*
          rm -rf static/images/*
          mkdir -p content/posts
          mkdir -p static/images

      # Passo 5: Clonar o obsidian-vault e copiar os ficheiros
      - name: üìÇ Copy files from obsidian-vault
        env:
          FILES: ${{ steps.payload.outputs.files }}
        run: |
          # Clonar o reposit√≥rio com as notas
          git clone https://github.com/${{ github.repository_owner }}/obsidian-vault.git /tmp/obsidian-vault
          
          # Processar cada ficheiro do payload
          while IFS= read -r file; do
            if [[ "$file" == *.md ]]; then
              # Criar diret√≥rio se n√£o existir e copiar o ficheiro markdown
              mkdir -p "content/posts/$(dirname "$file")"
              cp "/tmp/obsidian-vault/$file" "content/posts/$file"
              
              # Corrigir caminhos de imagens no markdown
              sed -i 's|!\[\[attachments/|![](/images/|g' "content/posts/$file"
            elif [[ "$file" == attachments/* ]]; then
              # Copiar anexos para o diret√≥rio de imagens
              filename=$(basename "$file")
              cp "/tmp/obsidian-vault/$file" "static/images/$filename"
            fi
          done < filelist.txt

      # Passo 6: Instalar e executar o Hugo
      - name: üõ†Ô∏è Install Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: üì¶ Build site with Hugo
        run: hugo --minify

      # Passo 7: Fazer deploy via FTP
      - name: üì° Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ secrets.FTP_PATH }}
          local-dir: public/
