name: Process and Deploy Digital Garden

on:
  repository_dispatch:
    types: [obsidian-update]

permissions:  # Adicionando permiss√µes expl√≠citas
  contents: write
  actions: write  # Necess√°rio para cancelar workflows
  deployments: write

jobs:
  process-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üõë Cancel Previous Runs
        if: github.event_name == 'repository_dispatch'  # S√≥ cancela se for trigger manual
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}  # Usa o token explicitamente

      - name: üöÄ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì• Process payload data
        id: payload
        run: |
          # Verifica se o payload est√° no formato esperado
          if [ -z '${{ github.event.client_payload.notas }}' ]; then
            echo "::error::Payload inv√°lido - campo 'notas' n√£o encontrado"
            exit 1
          fi
          
          FILES=$(echo '${{ toJSON(github.event.client_payload.notas) }}' | jq -r '.[] | select(length > 0)')
          echo "files=${FILES}" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è Ficheiros a processar:"
          echo "$FILES"

      # Restante do seu workflow permanece igual...
      - name: üßπ Clean up directories
        run: |
          rm -rf content/posts/*
          rm -rf static/images/*
          mkdir -p content/posts
          mkdir -p static/images

      - name: üìÇ Copy files
        env:
          FILES: ${{ steps.payload.outputs.files }}
        run: |
          git clone https://${{ github.actor }}:${{ secrets.GARDEN_TOKEN }}@github.com/${{ github.repository_owner }}/obsidian-vault.git /tmp/obsidian-vault
          
          echo "$FILES" | while read -r file; do
            if [[ -f "/tmp/obsidian-vault/$file" ]]; then
              if [[ "$file" == *.md ]]; then
                mkdir -p "content/posts/$(dirname "$file")"
                cp "/tmp/obsidian-vault/$file" "content/posts/$file"
                echo "üìù Processada nota: $file"
              elif [[ "$file" == attachments/* ]]; then
                cp "/tmp/obsidian-vault/$file" "static/images/$(basename "$file")"
                echo "üñºÔ∏è Copiada imagem: $(basename "$file")"
              fi
            else
              echo "‚ö†Ô∏è Ficheiro n√£o encontrado: $file"
            fi
          done

      # [Mant√©m os passos do Hugo e FTP abaixo]
