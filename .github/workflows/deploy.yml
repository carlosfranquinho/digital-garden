name: Process and Deploy Digital Garden

on:
  repository_dispatch:
    types: [obsidian-update]

jobs:
  process-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Checkout com limpeza FORÇADA
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true  # ← Isso é CRUCIAL para limpar totalmente

      - name: 💥 Remover conteúdo antigo (FORÇADO)
        run: |
          # Destruir tudo exceto .git e outros essenciais
          shopt -s dotglob extglob
          rm -rf !(.git|.github|.gitignore|.gitattributes)
          mkdir -p content/posts static/imagens

      - name: 📥 Processar payload
        id: payload
        run: |
          echo '${{ toJSON(github.event.client_payload.notas) }}' > notas.json
          echo "📋 Lista recebida:"
          cat notas.json

      - name: 📂 Copiar novos arquivos
        run: |
          git clone https://${{ github.actor }}:${{ secrets.GARDEN_TOKEN }}@github.com/${{ github.repository_owner }}/obsidian-vault.git /tmp/obsidian-vault

          # Slugification robusta
          slugify() {
            echo "$1" | 
            iconv -t ascii//TRANSLIT |
            tr -d "'\"" |
            tr -s '[:space:][:punct:]' '-' |
            tr '[:upper:]' '[:lower:]' |
            sed 's/-$//;s/^-//;s/[^a-z0-9\-]//g'
          }

          jq -r '.[]' notas.json | while read -r original; do
            if [[ "$original" == *.md ]]; then
              novo_nome="content/posts/$(slugify "$original")"
              mkdir -p "$(dirname "$novo_nome")"
              cp "/tmp/obsidian-vault/$original" "$novo_nome"
              sed -i -E 's|!\[\[(attachments/)?([^]]+)\]\]|![](/imagens/\2)|g' "$novo_nome"
              echo "📄 $original → $novo_nome"

            elif [[ "$original" == attachments/* ]]; then
              cp "/tmp/obsidian-vault/$original" "static/imagens/$(basename "$original")"
              echo "🖼️ $(basename "$original")"
            fi
          done

      # ... (mantenha os passos do Hugo e FTP abaixo)
      - name: 🛠️ Instalar Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: 📦 Gerar site com Hugo
        run: hugo --minify

      - name: 📡 Fazer deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4  # Corrigido: 'v' antes da versão
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ secrets.FTP_PATH }}
          local-dir: public/
